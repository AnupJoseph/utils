[{"content":"Edit distance is essentially a metric which is about comparing the number of changes required to turn one string into another.\n\u0026ldquo;Whisky\u0026rdquo; — \u0026ldquo;Whiskey\u0026rdquo;: Levenshtein Distance, 1. An ‘e’ is added.\nUsing this function on a large text column often tens to be pretty slow. So we write a UDF(user-defined-function) in Javascript and use BigQuery to execute this Javascript function over the whole column. (The syntax highlighting breaks badly cause this is a weird combination of SQL and JS.)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 CREATE OR REPLACE FUNCTION validation_data.LevenshteinDistance(in_a string, in_b string) RETURNS INT64 LANGUAGE js AS \u0026#34;\u0026#34;\u0026#34; /* * Data Quality Function - Fuzzy Matching * dq_fm_LevenshteinDistance * Based off of https://gist.github.com/andrei-m/982927 * input: Two strings to compare the edit distance of. * returns: Integer of the edit distance. */ var a = in_a.toLowerCase(); var b = in_b.toLowerCase(); if (a.length == 0) return b.length; if (b.length == 0) return a.length; var matrix = []; // increment along the first column of each row var i; for (i = 0; i \u0026lt;= b.length; i++) { matrix[i] = [i]; } // increment each column in the first row var j; for (j = 0; j \u0026lt;= a.length; j++) { matrix[0][j] = j; } // Fill in the rest of the matrix for (i = 1; i \u0026lt;= b.length; i++) { for (j = 1; j \u0026lt;= a.length; j++) { if (b.charAt(i - 1) == a.charAt(j - 1)) { matrix[i][j] = matrix[i - 1][j - 1]; } else { matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1, // substitution Math.min(matrix[i][j - 1] + 1, // insertion matrix[i - 1][j] + 1)); // deletion } } } return matrix[b.length][a.length]; \u0026#34;\u0026#34;\u0026#34; This function was creatively extracted from a blog here. Please read it to get more info on how this exactly works\n","date":"0001-01-01T00:00:00Z","image":"https://anupjoseph.github.io/utils/p/edit-distance-bigquery/cover_huac88d6f430ba3fd5a93723025a88c141_30514_120x120_fill_q75_h2_box_smart1_2.webp","permalink":"https://anupjoseph.github.io/utils/p/edit-distance-bigquery/","title":"BigQuery Levenshtien Distance"},{"content":"I looked far and wide to find a good way to build a bump chart like the one in this tweet in Python. After finding basically nothing except for a page in Altair docs about Bump Charts, I (reluctantly) decided to roll my own version of the tweet. While it did not reach the expected highs of that tweet, I am pleased with the end result and its easily modifiable and extensible.\nThe data I am using is the flights arrival and departure info available here. Replace this with your own when working on your data.\n1 2 3 4 # Lets get all the imports in place import pandas as pd import plotly.graph_objects as go import numpy as np 1 2 data = pd.read_csv(\u0026#34;flights.csv\u0026#34;) data.head() Here we are trying to arange countries by the amount of air traffic across years. Let\u0026rsquo;s build that information by grouping by the STATE_NAME,YEAR variables and then adding total flight count(FLT_TOT_1).\n1 2 3 4 5 6 7 country_flights_by_year = ( data[[\u0026#34;YEAR\u0026#34;, \u0026#34;STATE_NAME\u0026#34;, \u0026#34;FLT_TOT_1\u0026#34;]] .groupby(by=[\u0026#34;YEAR\u0026#34;, \u0026#34;STATE_NAME\u0026#34;]) .sum() .reset_index() ) country_flights_by_year I am going to build an extra column to use as proxy for rank and the X-axis of the chart as well\n1 2 3 x = country_rank.YEAR.unique() country_dict = {} country_rank[\u0026#34;POSITION\u0026#34;] = np.stack([range(1, 13) for _ in range(6)], axis=0).ravel() The next bit here is important. A bumpchart essentially represents the position of each category w.r.t. to others. To do that obviously its needs the said position. We build the same in this section. This code will differ for each chart. Its possible to generalize this but I am not going to do that here.\n1 2 3 4 5 6 for grp_name, grp in country_rank.groupby(\u0026#34;STATE_NAME\u0026#34;): country_position = [13 - i for i in grp.POSITION] if len(country_position) \u0026gt; 2: country_dict[grp_name] = country_position country_dict[\u0026#34;Poland\u0026#34;].insert(0, 1) country_dict[\u0026#34;Portugal\u0026#34;].insert(3, 1) And finally we use this dict to plot the chart.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 fig = go.Figure() for country, position in country_dict.items(): fig.add_trace( go.Scatter( x=x, y=position, line_shape=\u0026#34;spline\u0026#34;, name=country, ) ) fig.update_traces(hoverinfo=\u0026#34;text+name\u0026#34;, mode=\u0026#34;lines+markers\u0026#34;) fig.update_layout(showlegend=False) fig.update_xaxes(showgrid=False,zeroline=False) fig.update_yaxes(showgrid=False,zeroline=False) fig.show() And here\u0026rsquo;s the chart! I think this looks good for now! Its a clean chart that we can extend for our uses later!\nThanks to Stephen Teodosescu for this awesome chart.\n","date":"0001-01-01T00:00:00Z","image":"https://anupjoseph.github.io/utils/p/bumpchart-python/cover_hu785a14dac6c3e02def33fa2fd5c1ec0f_47184_120x120_fill_box_smart1_3.png","permalink":"https://anupjoseph.github.io/utils/p/bumpchart-python/","title":"Bumpchart with Python and plotly"},{"content":"This is a way to do replicate seaborn countplot functionality in Plotly.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 import plotly.express as px def countplot(dataset, column, log_y=False): fig = px.bar( x=dataset[column].value_counts().index, y=dataset[column].value_counts(), log_y=log_y, ) fig.data[0].x = [ f\u0026#34;{xtickval[:40]}...\u0026#34; if len(xtickval) \u0026gt; 30 else xtickval for xtickval in fig.data[0].x ] return fig This is the all the code you need for countplot\n1 countplot(dataset,column=\u0026#34;OCC_TITLE\u0026#34;).show() ","date":"0001-01-01T00:00:00Z","image":"https://anupjoseph.github.io/utils/p/count-plot-plotly/cover_hu0d9d92d29d2547752bcb7f2fb2a52b4a_27518_120x120_fill_box_smart1_3.png","permalink":"https://anupjoseph.github.io/utils/p/count-plot-plotly/","title":"Countplot in Plotly"},{"content":"I wanted to quickly extract a table from a webpage. And I didn\u0026rsquo;t want to go through the using beautiful_soup or scrapy to do that. While I was looking for something simple I found a gem of a function to do that.\nI want to extract the list of hellos in different languages from this page. Let\u0026rsquo;s go ahead and import pandas.\n1 import pandas as pd We can now use the read_html function from pandas like so\n1 tables = pd.read_csv(\u0026#34;https://www.berlitz.com/blog/hello-different-languages\u0026#34;) The languages table is the first table in the page. So we can index it\n1 tables[0] And that\u0026rsquo;s it. A really quick way to extract something that\u0026rsquo;s actually not quite this easy otherwise.\n","date":"0001-01-01T00:00:00Z","image":"https://anupjoseph.github.io/utils/p/extract_table/table_hu94a288cbbe6d7ca711ec547e3b0ec3c6_35923_120x120_fill_box_smart1_3.png","permalink":"https://anupjoseph.github.io/utils/p/extract_table/","title":"Extract Table from Webpage"},{"content":"While doing any EDA or exploratory activity, you often need to groupby a certain column(s) and then do a simple count over them. This is how you\u0026rsquo;d do it in Julia\nLet\u0026rsquo;s say you have a dataset like so\n1 2 3 4 5 using DataFrames df = DataFrame( age_group=[\u0026#34;0-30\u0026#34;,\u0026#34;30-60\u0026#34;,\u0026#34;60-80\u0026#34;,\u0026#34;30-60\u0026#34;,\u0026#34;0-30\u0026#34;,\u0026#34;60-80\u0026#34;], gender=[\u0026#34;M\u0026#34;,\u0026#34;F\u0026#34;,\u0026#34;M\u0026#34;,\u0026#34;F\u0026#34;,\u0026#34;M\u0026#34;,\u0026#34;F\u0026#34;] ) Say you want to count the population first splitting by gender and then by age. Maybe as a further input for a stacked-bar chart. First you need to do the groupby:\n1 gdf = groupby(df,[:gender,:age_group]) Now that we have the individual groups we can just use the nrows function to count the number of rows in each group.\n1 combine(gdf,nrow =\u0026gt; :num_rows) ","date":"0001-01-01T00:00:00Z","permalink":"https://anupjoseph.github.io/utils/p/group_by_counts/","title":"Groupby With Count"},{"content":"Here\u0026rsquo;s a snippet to have a basic logging config setup in Python in a couple of lines of code.\n1 2 3 4 5 6 7 8 import logging logging.basicConfig( filename=\u0026#34;output.log\u0026#34;, filemode=\u0026#34;w\u0026#34;, level=logging.DEBUG, format=\u0026#34;%(asctime)s:%(levelname)s:%(message)s\u0026#34;, datefmt=\u0026#34;%Y-%m-%d %I:%M:%S%p\u0026#34;, ) ","date":"0001-01-01T00:00:00Z","permalink":"https://anupjoseph.github.io/utils/p/logging_config/","title":"Set up a simple logging config"},{"content":"A simple onliner to set device in PyTorch.\n1 2 3 4 5 6 7 8 9 10 import torch device = ( \u0026#34;cuda\u0026#34; if torch.cuda.is_available() else \u0026#34;mps\u0026#34; if torch.backends.mps.is_available() else \u0026#34;cpu\u0026#34; ) print(f\u0026#34;Using {device} device\u0026#34;) ","date":"0001-01-01T00:00:00Z","permalink":"https://anupjoseph.github.io/utils/p/device_oneline/","title":"Setting device in Torch"},{"content":"This is a function using pypdf to split a multi-page PDF into individual pages.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import os from pypdf import PdfReader, PdfWriter def split_pdfs(input_file_path): inputpdf = PdfReader(open(input_file_path, \u0026#34;rb\u0026#34;)) out_paths = [] if not os.path.exists(\u0026#34;outputs\u0026#34;): os.makedirs(\u0026#34;outputs\u0026#34;) for i, page in enumerate(inputpdf.pages): output = PdfWriter() output.add_page(page) out_file_path = f\u0026#34;outputs/{input_file_path[:-4]}_{i}.pdf\u0026#34; with open(out_file_path, \u0026#34;wb\u0026#34;) as output_stream: output.write(output_stream) out_paths.append(out_file_path) return out_paths ","date":"0001-01-01T00:00:00Z","permalink":"https://anupjoseph.github.io/utils/p/split-pdfs/","title":"Split pdfs with python"},{"content":"Table of Contents Shell tricks Switch to previous directory git master 1. cd Get global ip Simple commands Loop Loop with specified increment each iteration Sequences of letters or numbers Reuse arguments Reuse commands Compare output of two commands Fix last command Accept interactive commands Last exit code Easy backup Print to stderr Debugging Useful readline tricks Repeat command Zipping and Unzip Shell tricks Switch to previous directory git cd Get global ip Simple commands Loop Loop with specified increment each iteration Sequences of letters or numbers Reuse arguments Reuse commands Compare output of two commands Fix last command Accept interactive commands Last exit code Easy backup Print to stderr Debugging Useful readline tricks Repeat command Zipping and Unzip Switch to previous directory Switch between the current and previous branch / directory.\ngit #+beginsrc sh $ git branch\nmaster development\n$ git checkout development Switched to branch ’development’ $ git checkout - # Switch to previous Switched to branch ’master’ $ git checkout - Switched to branch ’development’ #+endsrc\ncd $ pwd / $ cd /tmp $ cd - # Switch to previous / $ cd - /tmp Get global ip $ curl ifconfig.co # IPv4 50.110.14.21 $ curl -6 ifconfig.co # IPv6 2010:3f3f:113f:0:ea57:4497:7291:e422 Simple commands Create a script which calls functions by its` first argument. This is very useful to create simple scripts which could be a wrapper for other commands.\n#!/usr/bin/env bash function do_this () { echo \u0026quot;call do_this function\u0026quot;; } function do_sth() { echo \u0026quot;call do_sth function\u0026quot; } case \u0026quot;$1\u0026quot; in do_this|do_sth) \u0026quot;$1\u0026quot; ;; esac Execute it:\n$ ./simple-commands.sh do_this call do_this function Loop Write simple one liner loops if you need to do some batch tasks.\n$ for i in {1..10}; do echo \u0026quot;$i\u0026quot;; done # List disk usage by directories $ for file in */ .*/ ; do du -sh $file; done Loop with specified increment each iteration for i in {1..100..2}; do echo $i; done 1 3 5 7 ... Sequences of letters or numbers Brace expansion is great for lots of things.\n$ touch file{a..c} $ ls $ command ls filea fileb filec $ touch file-{1..15} $ ls file-1 file-10 file-11 file-12 file-13 file-14 file-15 file-2 file-3 file-4 file-5 file-6 file-7 file-8 file-9 $ ls file-{9..12} file-10 file-11 file-12 file-9 $ printf \u0026quot;%s\\n\u0026quot; file-{a..c}{1..3} file-a1 file-a2 file-a3 file-b1 file-b2 file-b3 file-c1 file-c2 file-c3 (If you give printf more arguments than it expects, it automatically loops.)\nReuse arguments $ ls /tmp some_file.txt some_archive.tar.gz $ cd !$ /tmp Reuse commands $ echo \u0026quot;reuse me\u0026quot; reuse me $ !! echo \u0026quot;reuse me\u0026quot; reuse me Compare output of two commands diff \u0026lt;(echo \u0026quot;1 2 4\u0026quot;) \u0026lt;(echo \u0026quot;1 2 3 4\u0026quot;) 1c1 \u0026lt; 1 2 4 --- \u0026gt; 1 2 3 4 Fix last command $ ehco foo bar bar bash: ehco: command not found $ ^ehco^echo foo bar baz Accept interactive commands $ yes | ./interactive-command.sh Are you sure (y/n) Accepted yes: standard output: Broken pipe The error message is printed because yes gets killed by SIGPIPE signal. This happens if the pipe to ./interactive-command.sh gets closed but yes still wants to write into it.\nIgnore error message:\n$ yes 2\u0026gt;/dev/null | ./interactive-command.sh\nLast exit code $ ls /tmp some_file.txt $ echo $? 0 Easy backup $ cp file.txt{,.bak} $ ls -1 file.txt file.txt.bak Print to stderr $ \u0026gt;\u0026amp;2 echo hello hello Debugging Add -xv to your bash scripts, i.e.:\n/usr/bin/env bash set -xv or /bin/bash -xv script.sh\nUseful readline tricks If you use the standard bash readline bindings.\nC-a (aka CTRL+A) move cursor to beginning of line C-e (aka CTRL+E) move cursor to end of line M-. (aka ALT+.) insert last argument of previous command (like !$, but you can edit it) Repeat command Execute a command every two seconds and monitor its` output. This is especially useful for waiting until a deployment or infrastructure provisioning is completed, i.e. on aws.\nwatch -n2 echo hello ` ## Substrings\n$ a=\u0026quot;apple orange\u0026quot; $ echo ${a#* } orange $ echo ${a#*p} ple orange $ echo ${a##*p} le orange $ echo ${a% *} apple $ echo ${a%p*} ap $ echo ${a%%p*} a The # for finding first occurence from the start and % for the first occurence from the end. * for matching any pattern. For greedy matching ## and %%.\nZipping and Unzip To zip a folder with certain file types excluded\nzip -x {file_types} -r archive.zip {folder} ","date":"0001-01-01T00:00:00Z","permalink":"https://anupjoseph.github.io/utils/p/tricks-sh/","title":"tricks.sh"},{"content":"This is a simple way to do replicate pandas value_counts functionality in Julia. For the purpose of this example I am using Road Safety Dataset in OpenML. You\u0026rsquo;ll need the StatsBase and DataFrames packages for the same.\n1 2 3 4 5 6 using ARFFFiles using DataFrames using StatsBase # Lets load the dataset here as well dataset = ARFFFiles.load(DataFrame, \u0026#34;roadsafety.arff\u0026#34;) To do value counts on a column use this\n1 2 # Replace Vehicle_Type by whatever column name countmap(dataset.Vehicle_Type) To apply over a full DataFrame use\n1 countmap.(eachcol(dataset)) Kinda hard to read output so not gonna paste here\n","date":"0001-01-01T00:00:00Z","permalink":"https://anupjoseph.github.io/utils/p/value-counts-julia/","title":"Value Counts Julia"}]